---
- name: Install and Configure MongoDB
  hosts: mongo
  become: yes
  vars:
    replica_set_name: "rs0"
    mongodb_repo_key_path: "/usr/share/keyrings/mongodb-server-7.0.gpg"

  tasks:
    - name: Install dependencies
      apt:
        name: gnupg
        state: present
        update_cache: yes

    - name: Add GPG key
      get_url:
        url: https://pgp.mongodb.com/server-7.0.asc
        dest: /tmp/mongodb.asc

    - name: Add GPG to keyring
      shell: gpg --dearmor < /tmp/mongodb.asc > {{ mongodb_repo_key_path }}
      args:
        creates: "{{ mongodb_repo_key_path }}"

    - name: Add MongoDB apt repo
      apt_repository:
        repo: "deb [arch=amd64 signed-by={{ mongodb_repo_key_path }}] https://repo.mongodb.org/apt/ubuntu jammy/mongodb-org/7.0 multiverse"
        state: present
        filename: mongodb-org-7.0

    - name: Install MongoDB
      apt:
        name:
          - mongodb-org
          - mongodb-org-shell
          - mongodb-mongosh
        state: present
        update_cache: yes

    - name: Ensure log directory exists
      file:
        path: /var/log/mongodb
        state: directory
        owner: mongodb
        group: mongodb
        mode: '0755'

    - name: Deploy mongod.conf from template
      template:
        src: templates/mongod.conf.j2
        dest: /etc/mongod.conf
        owner: root
        group: root
        mode: '0644'
      notify: Restart MongoDB

    - name: Enable and start mongod
      service:
        name: mongod
        state: started
        enabled: true

  handlers:
    - name: Restart MongoDB
      service:
        name: mongod
        state: restarted

# ------------------ REPLICA INITIATION ------------------

- name: Initialize Replica Set
  hosts: "{{ groups['mongo'][0] }}"
  become: yes
  vars:
    replica_set_name: "rs0"

  tasks:
    - name: Gather member IPs
      set_fact:
        replica_members: "{{ groups['mongo'] | map('extract', hostvars, ['ansible_host']) | list }}"

    - name: Generate replica set config
      set_fact:
        replica_config: |
          {
            _id: "{{ replica_set_name }}",
            members: [
              {% for ip in replica_members %}
              { _id: {{ loop.index0 }}, host: "{{ ip }}:27017" }{{ "," if not loop.last else "" }}
              {% endfor %}
            ]
          }

    - name: Wait for mongod to respond
      wait_for:
        host: "{{ ansible_host }}"
        port: 27017
        delay: 5
        timeout: 30

    - name: Initiate Replica Set
      shell: |
        mongosh --quiet --eval '
        try {
          if (!rs.status().ok) {
            print("Initiating replica set...");
            printjson(rs.initiate({{ replica_config }}));
          } else {
            print("Already initiated.");
          }
        } catch (e) {
          print("Error or already initiated");
        }'

    - name: Check replica set status
      shell: mongosh --quiet --eval 'printjson(rs.status())'
      register: rs_status

    - name: Show status
      debug:
        var: rs_status.stdout
