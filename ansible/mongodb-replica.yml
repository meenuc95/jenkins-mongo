- hosts: mongo
  become: yes
  tasks:
    - name: Install dependencies
      ansible.builtin.apt:
        name: gnupg
        state: present
        update_cache: yes

    - name: Download MongoDB GPG key
      ansible.builtin.get_url:
        url: https://pgp.mongodb.com/server-7.0.asc
        dest: /tmp/mongodb-server-7.0.asc
        mode: '0644'

    - name: Convert GPG key to binary and move to keyrings
      ansible.builtin.shell: |
        gpg --dearmor < /tmp/mongodb-server-7.0.asc > /usr/share/keyrings/mongodb-server-7.0.gpg
      args:
        creates: /usr/share/keyrings/mongodb-server-7.0.gpg

    - name: Add MongoDB 7.0 repo for Ubuntu Jammy
      ansible.builtin.apt_repository:
        repo: "deb [arch=amd64 signed-by=/usr/share/keyrings/mongodb-server-7.0.gpg] https://repo.mongodb.org/apt/ubuntu jammy/mongodb-org/7.0 multiverse"
        state: present
        filename: 'mongodb-org-7.0'

    - name: Update apt cache
      ansible.builtin.apt:
        update_cache: yes

    - name: Install MongoDB packages
      ansible.builtin.apt:
        name:
          - mongodb-org
          - mongodb-org-shell
          - mongodb-mongosh
        state: present

    - name: Configure mongod.conf for replica set
      ansible.builtin.blockinfile:
        path: /etc/mongod.conf
        marker: "# {mark} ANSIBLE MANAGED BLOCK"
        block: |
          replication:
            replSetName: "rs0"
      notify: Restart MongoDB

    - name: Ensure mongod is started and enabled
      ansible.builtin.service:
        name: mongod
        state: started
        enabled: true

  handlers:
    - name: Restart MongoDB
      ansible.builtin.service:
        name: mongod
        state: restarted

- hosts: "{{ groups['mongo'][0] }}"
  become: yes
  tasks:
    - name: Gather all replica member private IPs
      ansible.builtin.set_fact:
        replica_members: "{{ groups['mongo'] | map('extract', hostvars, ['ansible_host']) | list }}"

    - name: Build replica set configuration
      ansible.builtin.set_fact:
        replica_config: |
          {
            _id: "rs0",
            members: [
              {% for ip in replica_members %}
                { _id: {{ loop.index0 }}, host: "{{ ip }}:27017" }{{ "," if not loop.last else "" }}
              {% endfor %}
            ]
          }

    - name: Initiate replica set with all members (idempotent)
      ansible.builtin.shell: |
        mongosh --quiet --eval '
        var status = rs.status();
        if (status.ok !== 1 || status.members.length !== {{ replica_members | length }}) {
          print("Initiating or reconfiguring replica set...");
          rs.initiate({{ replica_config }});
        } else {
          print("Replica set already initialized with correct members.");
        }
        '
      register: rs_initiate
      failed_when: false
      changed_when: "'Initiating or reconfiguring' in rs_initiate.stdout"

    - name: Show rs.status()
      ansible.builtin.shell: mongosh --quiet --eval "rs.status()"
      register: rs_status
      changed_when: false

    - name: Print replica set status
      ansible.builtin.debug:
        var: rs_status.stdout