# -------------------- MONGODB INSTALL & CONFIGURE ON ALL NODES --------------------
- hosts: mongo
  become: yes
  vars:
    mongo_version: "7.0"
    mongo_repo_key_path: "/usr/share/keyrings/mongodb-server-7.0.gpg"
    mongo_repo_url: "https://repo.mongodb.org/apt/ubuntu"
    mongo_repo_dist: "jammy/mongodb-org/{{ mongo_version }}"
    mongo_port: 27017
    replica_set_name: rs0

  tasks:
    - name: Install dependencies
      apt:
        name: gnupg
        state: present
        update_cache: yes

    - name: Download MongoDB GPG key
      get_url:
        url: "https://pgp.mongodb.com/server-{{ mongo_version }}.asc"
        dest: /tmp/mongodb-server.asc
        mode: '0644'

    - name: Convert GPG key to binary and move to keyrings
      shell: |
        gpg --dearmor < /tmp/mongodb-server.asc > {{ mongo_repo_key_path }}
      args:
        creates: "{{ mongo_repo_key_path }}"

    - name: Add MongoDB apt repository
      apt_repository:
        repo: "deb [ arch=amd64 signed-by={{ mongo_repo_key_path }} ] {{ mongo_repo_url }} {{ mongo_repo_dist }} multiverse"
        state: present
        filename: "mongodb-org-{{ mongo_version }}"

    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Install MongoDB
      apt:
        name:
          - mongodb-org
          - mongodb-org-shell
          - mongodb-mongosh
        state: present

    # -------- ENSURE REQUIRED DIRECTORIES EXIST --------
    - name: Ensure MongoDB data directory exists
      file:
        path: /var/lib/mongodb
        state: directory
        owner: mongodb
        group: mongodb
        mode: '0755'

    - name: Ensure MongoDB log directory exists
      file:
        path: /var/log/mongodb
        state: directory
        owner: mongodb
        group: mongodb
        mode: '0755'

    # -------- SAFE CONFIGURATION PATCHING --------
    - name: Set bindIp to 0.0.0.0
      lineinfile:
        path: /etc/mongod.conf
        regexp: '^ *bindIp:'
        line: '  bindIp: 0.0.0.0'
        insertafter: '^net:'
        state: present

    - name: Set replicaSet name
      lineinfile:
        path: /etc/mongod.conf
        regexp: '^ *replSetName:'
        line: '  replSetName: "{{ replica_set_name }}"'
        insertafter: '^replication:'
        state: present
        create: yes

    - name: Enable authorization
      lineinfile:
        path: /etc/mongod.conf
        regexp: '^ *authorization:'
        line: '  authorization: enabled'
        insertafter: '^security:'
        state: present
        create: yes

    - name: Ensure mongod is started and enabled
      service:
        name: mongod
        state: started
        enabled: true

# -------------------- INITIATE REPLICA SET ON PRIMARY NODE --------------------
- hosts: "{{ groups['mongo'][0] }}"
  become: yes
  vars:
    replica_set_name: rs0
    mongo_port: 27017

  tasks:
    - name: Gather all replica member IPs
      set_fact:
        replica_members: "{{ groups['mongo'] | map('extract', hostvars, ['ansible_host']) | list }}"

    - name: Build replica set configuration
      set_fact:
        replica_config: |
          {
            _id: "{{ replica_set_name }}",
            members: [
              {% for ip in replica_members %}
                { _id: {{ loop.index0 }}, host: "{{ ip }}:{{ mongo_port }}" }{{ "," if not loop.last else "" }}
              {% endfor %}
            ]
          }

    - name: Restart mongod to apply config
      service:
        name: mongod
        state: restarted

    - name: Wait 5 seconds for mongod to come up
      pause:
        seconds: 5

    - name: Check mongod status
      shell: systemctl is-active mongod
      register: mongod_status
      ignore_errors: true

    - name: Tail mongod logs if failed
      shell: tail -n 50 /var/log/mongodb/mongod.log
      register: mongod_log
      when: mongod_status.stdout != "active"

    - name: Print mongod logs
      debug:
        var: mongod_log.stdout
      when: mongod_status.stdout != "active"

    - name: Fail if mongod is not running
      fail:
        msg: "mongod is not running. Check logs above."
      when: mongod_status.stdout != "active"

    - name: Wait for mongod to accept connections
      wait_for:
        host: "{{ ansible_host }}"
        port: 27017
        timeout: 30

    - name: Initiate replica set (if not already initialized)
      shell: |
        mongosh --host {{ ansible_host }} --quiet --eval '
        try {
          rs.status();
          print("Replica set already initialized.");
        } catch (e) {
          print("Initiating replica set...");
          printjson(rs.initiate({{ replica_config }}));
        }
        '
      register: rs_init
      retries: 5
      delay: 5
      until: rs_init.rc == 0

    - name: Wait for full replica status
      shell: |
        mongosh --host {{ ansible_host }} --quiet --eval '
        try {
          var status = rs.status();
          if (!status.members || status.members.length < {{ replica_members | length }}) {
            throw new Error("Replica not fully initialized");
          } else {
            printjson(status);
          }
        } catch (e) {
          quit(1);
        }
        '
      register: rs_status
      retries: 5
      delay: 5
      until: rs_status.rc == 0

    - name: Show final replica set status
      debug:
        var: rs_status.stdout
