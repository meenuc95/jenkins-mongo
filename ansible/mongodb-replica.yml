---
- name: Install and Configure MongoDB on All Replica Set Members
  hosts: mongo
  become: yes
  vars:
    mongodb_repo_key_url: "https://pgp.mongodb.com/server-7.0.asc"
    mongodb_repo_key_path: "/usr/share/keyrings/mongodb-server-7.0.gpg"
    replica_set_name: "rs0"

  tasks:
    - name: Install gnupg
      ansible.builtin.apt:
        name: gnupg
        state: present
        update_cache: yes

    - name: Download MongoDB GPG key
      ansible.builtin.get_url:
        url: "{{ mongodb_repo_key_url }}"
        dest: /tmp/mongodb-server-7.0.asc
        mode: '0644'

    - name: Convert GPG key to binary and move to keyrings
      ansible.builtin.shell: |
        gpg --dearmor < /tmp/mongodb-server-7.0.asc > {{ mongodb_repo_key_path }}
      args:
        creates: "{{ mongodb_repo_key_path }}"

    - name: Add MongoDB 7.0 repo
      ansible.builtin.apt_repository:
        repo: "deb [arch=amd64 signed-by={{ mongodb_repo_key_path }}] https://repo.mongodb.org/apt/ubuntu jammy/mongodb-org/7.0 multiverse"
        state: present
        filename: mongodb-org-7.0

    - name: Install MongoDB
      ansible.builtin.apt:
        name:
          - mongodb-org
          - mongodb-org-shell
          - mongodb-mongosh
        state: present
        update_cache: yes

    - name: Ensure log dir exists
      ansible.builtin.file:
        path: /var/log/mongodb
        state: directory
        owner: mongodb
        group: mongodb
        mode: '0755'

    - name: Patch mongod.conf with networking and replica set (no auth)
      ansible.builtin.blockinfile:
        path: /etc/mongod.conf
        marker: "# {mark} ANSIBLE MANAGED BLOCK"
        block: |
          net:
            bindIp: 0.0.0.0
            port: 27017

          replication:
            replSetName: "{{ replica_set_name }}"
      notify: Restart MongoDB

    - name: Ensure mongod is started and enabled
      ansible.builtin.service:
        name: mongod
        state: started
        enabled: true

  handlers:
    - name: Restart MongoDB
      ansible.builtin.service:
        name: mongod
        state: restarted

# ------------------ SECOND PLAY: Initiate Replica Set ------------------

- name: Initiate Replica Set from Primary Node
  hosts: "{{ groups['mongo'][0] }}"
  become: yes
  vars:
    replica_set_name: "rs0"

  tasks:
    - name: Gather all replica member IPs
      set_fact:
        replica_members: "{{ groups['mongo'] | map('extract', hostvars, ['ansible_host']) | list }}"

    - name: Build replica set configuration
      set_fact:
        replica_config: |
          {
            _id: "{{ replica_set_name }}",
            members: [
              {% for ip in replica_members %}
                { _id: {{ loop.index0 }}, host: "{{ ip }}:27017" }{{ "," if not loop.last else "" }}
              {% endfor %}
            ]
          }

    - name: Wait for mongod to accept connections
      wait_for:
        host: "{{ ansible_host }}"
        port: 27017
        timeout: 30
        state: started

    - name: Initiate replica set
      shell: |
        mongosh --quiet --eval '
          try {
            var status = rs.status();
            if (status.ok) {
              print("Replica set already initialized.");
            }
          } catch (e) {
            print("Initiating replica set...");
            printjson(rs.initiate({{ replica_config }}));
          }
        '
      register: rs_initiate
      retries: 5
      delay: 5
      until: rs_initiate.rc == 0

    - name: Show final replica status
      shell: mongosh --quiet --eval 'printjson(rs.status())'
      register: final_rs_status

    - name: Print replica status output
      debug:
        var: final_rs_status.stdout
