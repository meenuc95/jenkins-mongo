- hosts: mongo
  become: yes
  vars:
    replica_set_name: rs0
  tasks:

    - name: Install required dependencies
      apt:
        name: gnupg
        update_cache: yes
        state: present

    - name: Download MongoDB GPG key
      get_url:
        url: https://pgp.mongodb.com/server-7.0.asc
        dest: /tmp/mongodb-server-7.0.asc

    - name: Add GPG key
      shell: |
        gpg --dearmor < /tmp/mongodb-server-7.0.asc > /usr/share/keyrings/mongodb-server-7.0.gpg
      args:
        creates: /usr/share/keyrings/mongodb-server-7.0.gpg

    - name: Add MongoDB 7.0 APT repository
      apt_repository:
        repo: "deb [arch=amd64 signed-by=/usr/share/keyrings/mongodb-server-7.0.gpg] https://repo.mongodb.org/apt/ubuntu jammy/mongodb-org/7.0 multiverse"
        state: present
        filename: mongodb-org-7.0

    - name: Update APT cache
      apt:
        update_cache: yes

    - name: Install MongoDB packages
      apt:
        name:
          - mongodb-org
          - mongodb-org-shell
          - mongodb-mongosh
        state: present

    - name: Ensure MongoDB log directory exists
      file:
        path: /var/log/mongodb
        state: directory
        owner: mongodb
        group: mongodb
        mode: '0755'

    - name: Deploy clean mongod.conf using template
      template:
        src: templates/mongod.conf.j2
        dest: /etc/mongod.conf
        owner: root
        group: root
        mode: '0644'
      notify: Restart mongod

    - name: Enable and start mongod service
      service:
        name: mongod
        state: started
        enabled: yes

  handlers:
    - name: Restart mongod
      service:
        name: mongod
        state: restarted

# ------------------ Initiate Replica Set -----------------------

- hosts: "{{ groups['mongo'][0] }}"
  become: yes
  vars:
    replica_set_name: rs0
  tasks:

    - name: Gather all replica member IPs
      set_fact:
        replica_members: "{{ groups['mongo'] | map('extract', hostvars, ['ansible_host']) | list }}"

    - name: Wait for mongod to be ready
      wait_for:
        port: 27017
        delay: 5
        timeout: 30

    - name: Initiate replica set (with retry)
      shell: |
        mongosh --quiet --eval '
        try {
          rs.status();
          print("Replica set already exists.");
        } catch (e) {
          print("Initiating replica set...");
          rs.initiate({
            _id: "{{ replica_set_name }}",
            members: [
              {% for ip in replica_members %}
                { _id: {{ loop.index0 }}, host: "{{ ip }}:27017" }{{ "," if not loop.last else "" }}
              {% endfor %}
            ]
          });
        }'
      register: rs_initiate
      retries: 5
      delay: 5
      until: rs_initiate.rc == 0

    - name: Wait for replica set to become healthy
      shell: |
        mongosh --quiet --eval '
        try {
          var s = rs.status();
          if (!s.members || s.members.length < {{ replica_members | length }}) throw "Not ready";
          printjson(s);
        } catch (e) { quit(1); }'
      register: rs_status
      retries: 5
      delay: 5
      until: rs_status.rc == 0

    - name: Print final replica status
      debug:
        var: rs_status.stdout
